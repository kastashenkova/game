package gui;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import org.example.MusicPlayer;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicSliderUI;
import java.awt.*;
import java.io.IOException;
import java.net.URL;

public class OptionsFrame extends JFrame {
    private JSlider volumeSlider;
    private JButton themeButton;
    private JButton instructionButton;
    boolean isDark = false;

    private int currentVolume = 50;
        public OptionsFrame() {
            setTitle("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏");
            setSize(400, 300);
            setLocationRelativeTo(null);
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());
            panel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
            panel.setBackground(new Color(241, 227, 253));

            JLabel volumeLabel = new JLabel("–ì—É—á–Ω—ñ—Å—Ç—å –º—É–∑–∏–∫–∏:");
            volumeSlider = new JSlider(0, 100, currentVolume);
            volumeSlider.setUI(new CustomSlider(volumeSlider));
            volumeSlider.setPaintTicks(true);
            volumeSlider.setMajorTickSpacing(25);
            volumeSlider.setMinorTickSpacing(5);
            volumeSlider.setPaintLabels(true);
            volumeSlider.setFont(new Font("Arial", Font.PLAIN, 10));

            volumeSlider.addChangeListener(e -> {

                    currentVolume = volumeSlider.getValue();
                    MusicPlayer.getInstance().setVolume(currentVolume);

            });

            themeButton = createButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É");
            themeButton.addActionListener(e -> {
                MusicPlayer.getInstance().playButtonClick();
                if(!isDark) {
                    try {
                        UIManager.setLookAndFeel(new FlatDarkLaf());
                        isDark = true;
                    } catch (UnsupportedLookAndFeelException ex) {
                        throw new RuntimeException(ex);
                    }
                } else {
                    try {
                        UIManager.setLookAndFeel(new FlatLightLaf());
                        isDark = false;
                    } catch (UnsupportedLookAndFeelException ex) {
                        throw new RuntimeException(ex);
                    }
                }
                SwingUtilities.updateComponentTreeUI(this);
                JOptionPane.showMessageDialog(this,
                        isDark ? "–¢–µ–º–Ω–∞ —Ç–µ–º–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!" : "–°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!", "THEME UPDATED", JOptionPane.INFORMATION_MESSAGE);

            });


            panel.add(volumeLabel);
            panel.add(volumeSlider, BorderLayout.CENTER);
            panel.add(themeButton, BorderLayout.NORTH);

            instructionButton = getInstructionButton();
            panel.add(instructionButton, BorderLayout.PAGE_END);
            add(panel);

        }
    private JButton createButton(String text) {

        JButton button = new JButton();
        button.setBackground(new Color(164, 183, 253));
        button.setText(text);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));

        return button;
    }
    private JButton getInstructionButton(){
        instructionButton = new JButton("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ –ø–æ—Ä–∞–¥–∏");
        instructionButton.setBackground(new Color(78, 90, 205));
        instructionButton.setForeground(Color.WHITE);
        instructionButton.setFont(new Font("Arial", Font.BOLD, 12));
        instructionButton.setFocusPainted(false);
        instructionButton.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        instructionButton.setBorder(new LineBorder(Color.WHITE, 2, true)); // true = –æ–∫—Ä—É–≥–ª—ñ –∫—É—Ç–∏
        instructionButton.addActionListener(e -> {

            SwingUtilities.invokeLater(() -> {

                MusicPlayer.getInstance().playButtonClick();
                InstructionDialog dialog = new InstructionDialog(this);
                dialog.setVisible(true);

            });
        });

        return instructionButton;

}

}

class InstructionDialog extends JDialog {

    public InstructionDialog(JFrame parent) {
        super(parent, "–Ø–∫ –≤–∏–∂–∏—Ç–∏ –≤ –ù–∞–£–ö–ú–ê", true);
        setSize(500, 400);
        setLocationRelativeTo(parent);
        setLayout(new BorderLayout(10, 10));

        JTextArea instructions = new JTextArea();
        instructions.setBackground(new Color(104, 183, 213));
        instructions.setEditable(false);
        instructions.setLineWrap(true);
        instructions.setWrapStyleWord(true);
        instructions.setFont(new Font("MONOSPACED", Font.BOLD, 14));
        instructions.setText(
                """
                üéì –í—ñ—Ç–∞—î–º–æ –≤ ¬´–°—ñ–º—Å –ù–∞–£–ö–ú–ê¬ª!

                –¢—É—Ç —Ç–∏ —É–ø—Ä–∞–≤–ª—è—Ç–∏–º–µ—à —Å—ñ–º–æ–º, —è–∫–æ–º—É —Ç—Ä–µ–±–∞:
                - –≤–∏–∂–∏—Ç–∏ –º—ñ–∂ –ø–∞—Ä–∞–º–∏, –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ —ñ –ª–µ–∫—Ü—ñ—è–º–∏;
                - –±–æ—Ä–æ—Ç–∏—Å—è —ñ–∑ –°–ê–ó–æ–º, –∑—ñ–±—Ä–∞—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∏, –Ω–µ –≤—Ç—Ä–∞—Ç–∏–≤—à–∏ —Ä–æ–∑—É–º;
                - –≤—Å—Ç–∏–≥–Ω—É—Ç–∏ –≤—Å–µ, –æ–∫—Ä—ñ–º —Å–Ω—É.
                
                üìã –û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Ä–∞–¥–∏:
                ‚Ä¢ –°–ª—ñ–¥–∫—É–π –∑–∞ –ø–æ—Ç—Ä–µ–±–∞–º–∏: —ó—Å—Ç–∏, —Å–ø–∞—Ç–∏, —ñ —Ö–æ—á–∞ –± —ñ–Ω–æ–¥—ñ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—Ç–∏ –ø–∞—Ä–∏.
                ‚Ä¢ –ù–µ –≤–∏—Ç—Ä–∞—á–∞–π —É—Å—ñ –≥—Ä–æ—à—ñ –æ–¥—Ä–∞–∑—É(–ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ), —Å—Ç–∏–ø–µ–Ω–¥—ñ—é —â–µ —Ç—Ä–µ–±–∞ –∑–∞—Ä–æ–±–∏—Ç–∏.
                ‚Ä¢ –ë–∞–ª–∏ - —Ü–µ –≤–∞–∂–ª–∏–≤–æ. –ë–æ —Ç–∞–∫ –º–æ–∂–Ω–∞ —ñ –¥–æ —Ç—Ä–µ—Ç—å–æ–≥–æ —Ä—ñ–≤–Ω—è –Ω–µ –¥—ñ–π—Ç–∏.
                ‚Ä¢ –î–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è –Ω–∞—Å—Ç—Ä–æ—é —à—É–∫–∞–π –∫–æ–ª–µ—Å–æ –æ–≥–ª—è–¥—É!
                
                ‚òï –õ–∞–π—Ñ—Ö–∞–∫–∏:
                ‚Ä¢–¢—É—Ç –º–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –≤—Å–µ –Ω–∞ –ø–∞—É–∑—É. –ö—Ä—ñ–º –°–ê–ó—É. –°–ê–ó –ø–∞—É–∑ –Ω–µ –ø—Ä–æ–±–∞—á–∞—î.).
                ‚Ä¢–ö—Ä–∞—â–µ –ø–æ–ø–æ—Ç—ñ—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–º—É —Ä—ñ–≤–Ω—ñ, –∞–Ω—ñ–∂ —Å–∫–ª–∞–¥–∞—Ç–∏ —É—Å—ñ —ñ—Å–ø–∏—Ç–∏ –Ω–∞ —Å–µ—Å—ñ—ó.
                ‚Ä¢–Ü —Ö–æ—á–∞ —Ç–æ–±—ñ –º–æ–∂–µ —Ç–∞–∫ –Ω–µ –∑–¥–∞–≤–∞—Ç–∏—Å—è, –∞–ª–µ —Å–æ–Ω - —Ü–µ –≤–∞–∂–ª–∏–≤–æ!
               
                –£—Å–ø—ñ—Ö—ñ–≤ —Ç–∞ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è!
                """
        );

        JScrollPane scrollPane = new JScrollPane(instructions);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JButton closeButton = new JButton("–ó—Ä–æ–∑—É–º—ñ–ª–æ");

        closeButton.addActionListener(e -> {
            MusicPlayer.getInstance().playButtonClick();
            dispose();
        });
        closeButton.setAlignmentX(Component.CENTER_ALIGNMENT);

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(closeButton);

        add(scrollPane, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
    }
}
class CustomSlider extends BasicSliderUI {
    Image im;

    public CustomSlider(JSlider js) {
        super(js);
    }

    @Override
    public void paintThumb(Graphics g) {
        try {
            if (im == null) {
                URL url = getClass().getResource("/button/slider.png");
                if (url != null) {
                    im = ImageIO.read(url);
                } else {
                    System.err.println("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å /button/slider.png");
                    return;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        Rectangle thumb = thumbRect;
        int width = thumb.width;
        int height = thumb.height;

        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(im, thumb.x, thumb.y, width, height, null);
        g2.dispose();
    }
}
